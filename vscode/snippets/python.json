{
    "argparse pattern": {
        "scope": "python",
        "prefix": ["args"],
        "body": ["parser = argparse.ArgumentParser()",
        "parser.add_argument('-i', '--input', required=True, type=str, help='input')",
        "parser.add_argument('-o', '--output', default='.', type=str, help='output')",
        "parser.add_argument('-v', '--verbose', help='increase output verbosity', action='store_true')",
        "parser.add_argument('--multichoice', choices=['a', 'b', 'c'], nargs='+', type=str, help='multiple types of arguments. May be called all at the same time.')",
        "args = parser.parse_args()"],
        "description": "A commonly used argparse example."
    },
    "danfault":{
        "scope":"python",
        "prefix": "danfault",
        "body": ["import argparse",
                "from datetime import datetime as dt",
                "try:",
                "    from termcolor import colored",
                "except ImportError:",
                "    def colored(inp,*s):",
                "        return inp",
                "try:",
                "    from tqdm import tqdm",
                "except ImportError:",
                "    def tqdm(inp,*s):",
                "        return inp",
                "",
                "def calls(type_call):",
                "    if(type_call=='error'): return '['+colored('x','red')+']'",
                "    elif(type_call=='warning'): return '['+colored('!','yellow')+']'",
                "    elif(type_call=='message'): return '['+colored('~','cyan')+']'",
                "",
                "def main():",
                "    pass",
                "",
                "if(__name__=='__main__'):",
                "    init=dt.now()",
                "    main()",
                "    end=dt.now()",
                "    print(calls('message'),'Elapsed time: {}'.format(end-init))"],
        "description": "GRR"
    },
    "danargs":{
        "scope":"python",
        "prefix": "danargs",
        "body": ["import os",
                "import numpy as np",
                "import pandas as pd",
                "import matplotlib.pyplot as plt",
                "import argparse",
                "from datetime import datetime as dt",
                "try:",
                "    from termcolor import colored",
                "except ImportError:",
                "    def colored(inp,*s):",
                "        return inp",
                "try:",
                "    from tqdm import tqdm",
                "except ImportError:",
                "    def tqdm(inp,*s):",
                "        return inp",
                "",
                "def calls(type_call):",
                "    if(type_call=='error'): return '['+colored('x','red')+']'",
                "    elif(type_call=='warning'): return '['+colored('!','yellow')+']'",
                "    elif(type_call=='message'): return '['+colored('~','cyan')+']'",
                "",
                "def main():",
                "    parser = argparse.ArgumentParser()",
                "    parser.add_argument('-i', '--input', required=True, type=str, help='input')",
                "    parser.add_argument('-o', '--output', default='.', type=str, help='output')",
                "    parser.add_argument('-v', '--verbose', help='increase output verbosity', action='store_true')",
                "    parser.add_argument('--multichoice', choices=['a', 'b', 'c'], nargs='+', type=str, help='multiple types of arguments. May be called all at the same time.')",
                "    args = parser.parse_args()",
                "",
                "if(__name__=='__main__'):",
                "    init=dt.now()",
                "    main()",
                "    end=dt.now()",
                "    print(calls('message'),'Elapsed time: {}'.format(end-init))"],
        "description": "GRR"
    }
}